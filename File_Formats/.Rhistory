}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
img_cut = function(img, breaks, ...){
cuts = cut(img, breaks=breaks, ...)
# cuts = factor(cuts, levels)
levs = levels(cuts)
cuts = as.numeric(cuts)
# res.p[ rs > ncut ] = cuts
img = niftiarr(img, array(cuts, dim=dim(img)))
return(list(img=img, levs=levs))
}
lr_symm = function(img){
dimg = dim(img)
max.slice = dimg[1]
mid.slice = (max.slice+1)/2
w = which(img > 0, arr.ind=TRUE)
## 20 - then 160, 90 - 20 + 90
## if 160 then 90 - 160 + 90
w[, 1] = 2 * mid.slice - w[,1]
w = w[ w[, 1] > 0 & w[, 1] < max.slice, ]
img[w] = 1
img = (img > 0)*1
img = newnii(img)
}
# allres = allres
make.pvalimg = function(pvalimg, runlist = NULL){
pvalimg.tab = llply(runlist, function(x) {
x = area_pct(pvalimg, ind.list=x, keepall=TRUE)
x$nvox = x$nvox/sum(x$nvox) * 100
x$roi_pct_any = x$roi_pct_any * 100
x$roi_mean_pct = x$roi_mean_pct * 100
x = x[order(x$nvox, decreasing=TRUE), , drop=FALSE]
x$area = rownames(x)
x
}, .progress= "text")
names(pvalimg.tab) = names(runlist)
return(pvalimg.tab)
}
atfile = file.path(atlasdir, "All_FSL_Atlas_Labels.Rda")
# atfile = file.path(atlasdir, "All_FSL_Atlas_Labels_Filled.Rda")
x = load(file=atfile)
lists = list(mni.list, jhut1.list, jhut2.list)
names(lists) = c("MNI", "EVE_1", "EVE_2")
sublists = list(jhut1.list, jhut2.list)
sublists = lapply(sublists, function(x) {
area = names(x)
x[grep("GLOBUS_PALLIDUS|THALAMUS|PUTAMEN", area)]
})
sublists = lapply(sublists, function(x) {
xx = unlist(x)
area = names(xx)
area = gsub("_left\\d*", "", area)
area = gsub("_right\\d*", "", area)
uarea = unique(area)
x = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx[ind]
})
names(x) = uarea
x
})
col.lists = list(jhut1.list, jhut2.list)
names(col.lists) = c("EVE_1", "EVE_2")
col.lists = lapply(col.lists, function(x) {
area = names(x)
area = gsub("_left", "", area)
area = gsub("_right", "", area)
uarea = unique(area)
res = lapply(uarea, function(aname){
ind = which(area %in% aname)
xx = sort(unlist(x[ind]))
names(xx) = NULL
# print(ind)
xx
# xx[ind]
})
names(res) = uarea
res
})
rm(list=x)
area_pct = function(img, ind.list, keepall) {
## get overlap of indices
raw.mat = sapply(ind.list, function(x) sum(img[x]))
any.mat = sapply(ind.list, function(x) mean(img[x] > 0))
mn.mat = sapply(ind.list, function(x) mean(img[x]))
names(raw.mat) = names(ind.list)
## cs is sum of indices of overlap
cs.raw = data.frame(nvox=raw.mat, roi_pct_any = any.mat,
roi_mean_pct = mn.mat)
rownames(cs.raw) = names(ind.list)
if (!keepall) cs.raw = cs.raw[rowSums(cs.raw) != 0, ,
drop=FALSE]
return(cs.raw)
}
eve = col.lists[[2]]
ind = eve[[which(names(eve) == "Background")]]
whichdir = "reoriented"
outcome = "NIHSS"
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels=
c("Lobar", "Globus Pallidus",
"Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
all.demog = demog
###############################################
# Load and subset matrix
###############################################
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
all.mat = mat
all.rs = rs
# ncut = 0.1
ncut = 10
template = file.path(tempdir, "scct_unsmooth.nii.gz")
temp = readNIfTI(template)
dtemp = dim(temp)
t.t1 = file.path(tempdir, "sct1_unsmooth.nii.gz")
temp.t1 = readNIfTI(t.t1)
#############################################
# Overall desnity image
##############################################
noivh = demog$IVH_Dx_10 == 0 & demog$patientName != 131316
noivh.mat = mat[, which(noivh), drop=FALSE]
ivhvox = colSums(noivh.mat[ind, ])
rs = rowSums(noivh.mat)
csf.ind = col.lists[["EVE_1"]][["Background"]]
csfmask = array(0, dim = dtemp)
csfmask[csf.ind] = 1
csfmask = niftiarr(temp, csfmask)
csf.true = colSums(mat[csf.ind, ])
true = colSums(mat)
rat = csf.true/true
rat
sum(noivh.mat[csf.ind, ])/sum(noivh.mat)
sum(all.mat[csf.ind, ])/sum(all.mat)
mean(rat)
csf.true
dim(noivh.mat[csf.ind, ])
mean(dim(noivh.mat[csf.ind, ]))
mean(noivh.mat[csf.ind, ])
colMeans(noivh.mat[csf.ind, ])
rowMeans(noivh.mat[csf.ind, ])
mean(rowMeans(noivh.mat[csf.ind, ]))
noivh.csf.true = colSums(noivh.mat[csf.ind, ])
noivh.true = colSums(noivh.mat)
noivh.rat = noivh.csf.true/noivh.true
noivh.rat
hist(rowMeans(noivh.mat[csf.ind,]))
hist(rowMeans(all.mat[csf.ind,]))
mean(rowMeans(all.mat[csf.ind,]))
mean(all.mat[csf.ind,])
mean(noivh.mat[csf.ind,])
colSums(mat)
any = rowSums(all.mat) > 0
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
dim(any)
length(any)
csf.true
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
any.hem = rowSums(all.mat[csf.ind, ]) > 0
any.noivh.hem = rowSums(noivh.mat[csf.ind,]) > 0
any.hem
mean(all.mat[csf.ind, ][any.hem,])
mean(all.mat[csf.ind, ][any.hem,])
mean(noivh.mat[csf.ind, ][any.noivh.hem,])
mean(all.mat[csf.ind, ][any.hem,])
mean(noivh.mat[csf.ind, ][any.noivh.hem,])
mean(noivh.mat[csf.ind, ][any.hem,])
length(csf.ind)
mean(noivh.mat[csf.ind, ])
hist(colMeans[csf.ind, ])
hist(colMeans(noivh.mat[csf.ind, ])
()
)
hist(colMeans(noivh.mat[csf.ind, ]))
colMeans(noivh.mat[csf.ind, ])
hist(colMeans(noivh.mat[csf.ind, ]))
mean(colMeans(noivh.mat[csf.ind, ]))
mean(noivh.mat[csf.ind, ])
mean(all.mat[csf.ind, ])
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat[csf.ind,]) > 0
any.hem = rowSums(all.mat) > 0
any.noivh.hem = rowSums(noivh.mat) > 0
dim(any.noivh)
dim(any.noivh.hem)
length(any.noivh.hem)
length(all.mat)
length(any.hem)
any.hem = which(rowSums(all.mat) > 0)
any.noivh.hem = which(rowSums(noivh.mat) > 0)
mean(csf.ind %in% any.hem)
mean(csf.ind %in% any.noivh.hem)
any.hem = which(rowSums(all.mat) > 10)
any.noivh.hem = which(rowSums(noivh.mat) > 6)
mean(csf.ind %in% any.hem)
mean(csf.ind %in% any.noivh.hem)
sum(noivh.mat[csf.ind, ])/sum(noivh.mat)
sum(all.mat[csf.ind, ])/sum(all.mat)
mean(noivh.mat[csf.ind,])
dim(noivh)
dim(noivh.mat)
mean(noivh.mat[csf.ind,][rowSums(noivh.mat) > 0, ])
noivh.keep = rowSums(noivh.mat) > 0
noivh.keep = which(rowSums(noivh.mat) > 0)
noivh.keep
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
whichdir = "reoriented"
outcome = "GCS"
adder = paste0(outcome, "_")
if (outcome == "NIHSS"){
adder = ""
}
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
measures  = c("adj.r.squared", "r.squared", "sigma")
reses = vector("list", length=length(measures))
names(reses) = measures
epics = aics = reses
if (outcome == "GCS") {
demog$Y = demog$Enrollment_GCS_Add
} else if (outcome == "NIHSS"){
demog$Y = demog$Enrollment_NIHSS_Total
} else {
stop(paste0("Outcome ", outcome, " not implemented"))
}
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels= c("Lobar", "Globus Pallidus", "Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
cc = complete.cases(demog$Y)
demog = demog[cc,]
zform = ~ Age + Sex + Diagnostic_ICH
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
B = 10000
Y = sapply(seq(B), function(x){
sample(demog$Y)
})
Y
dim(Y)
B = 1000
Y = sapply(seq(B), function(x){
sample(demog$Y)
})
ncut = 10
all.nvox = sum(rs > 0)
dim(mat)
sum(rs > ncut)
runmat = mat[rs > ncut, ]
X = t(runmat[, cc, drop=FALSE])
class(X) = "numeric"
verbose= TRUE
tol = 1e-12
ncheck = 10
Z = NULL
mytime = system.time({
# mods = fast_lm(Y, X, Z, spot.check = TRUE, ncheck = 10)
mods = fast_lm(Y, X, Z = NULL, spot.check = TRUE, ncheck = 10)
})
#################################
# Regressions with % of ROI
# Author: John Muschelli
#################################
rm(list=ls())
library(cttools)
library(scales)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(grid)
library(plyr)
homedir = "/Applications"
rootdir = "~/CT_Registration"
basedir = file.path(rootdir, "data")
outdir = basedir
if (Sys.info()[["user"]] %in% "jmuschel") {
homedir = "~"
rootdir = "/dexter/disk2/smart/stroke_ct/ident"
basedir = file.path(rootdir, "Registration")
outdir = file.path(basedir, "results")
}
progdir = file.path(rootdir, "programs")
tempdir = file.path(rootdir, "Template")
atlasdir = file.path(tempdir, "atlases")
whichdir = "reoriented"
outcome = "GCS"
adder = paste0(outcome, "_")
if (outcome == "NIHSS"){
adder = ""
}
get.id = function(x){
ss = strsplit(x, "_")
ss = sapply(ss, head, 1)
ss = gsub(".*(\\d\\d\\d-.*)", "\\1", ss)
ss
}
id_to_pname = function(x){
as.numeric(gsub("-", "", x))
}
nkeeps = c(1000, 2000, 3000, .001, 0.01, 0.05)
demog = read.csv(file=file.path(basedir, "Demog_NIHSS_Mask.csv"),
stringsAsFactors=FALSE)
demog$Base_ICH_10 = demog$Diagnostic_ICH /10
measures  = c("adj.r.squared", "r.squared", "sigma")
reses = vector("list", length=length(measures))
names(reses) = measures
epics = aics = reses
if (outcome == "GCS") {
demog$Y = demog$Enrollment_GCS_Add
} else if (outcome == "NIHSS"){
demog$Y = demog$Enrollment_NIHSS_Total
} else {
stop(paste0("Outcome ", outcome, " not implemented"))
}
demog$Clot_Location_RC = gsub("Palidus", "Pallidus",
demog$Clot_Location_RC )
demog$Clot_Location_RC = factor(demog$Clot_Location_RC,
levels= c("Lobar", "Globus Pallidus", "Putamen", "Thalamus"))
demog$LOC = demog$Clot_Location_RC
cc = complete.cases(demog$Y)
demog = demog[cc,]
zform = ~ Age + Sex + Diagnostic_ICH
# Z = model.matrix(object = zform, data = demog)
# Z = model.matrix(object = zform, data = demog)
outfile = file.path(outdir, "Voxel_Matrix.Rda")
load( file=outfile )
B = 10000
Y = sapply(seq(B), function(x){
sample(demog$Y)
})
rm(list=ls())
library(plyr)
library(dplyr)
library(mgcv)
library(ggplot2)
library(splines)
library(tidyr)
library(scales)
# ID = subject ID
# MONTHS = months since seroconversion (detection of infection)
# AGE = age of subject
# CD4-COUNT = # of CD4 positive cells (helper cells) per mm^3
#   CD8-COUNT = # of CD8 positive cells (supressor cells) per mm^3
#   VLOAD0 = viral load at baseline (copies per ml)
# AIDSCASE = 1 if no AIDS observed; 2 if AIDS observed; 3 if died prior to AIDS
# VTIME = calendar time of study visit in months since January 1984
# SCTIME = calendar time of seroconversion (infection) in months since 1/1984
# ATIME = calendar time of AIDS diagnosis in months since 1/1984
# DTIME = calendar time of death in months since 1/1984, or follow-up time
# IDEATH = indicator of death at DTIME (1=death, 0=censored)
macs <- read.table("http://faculty.washington.edu/heagerty/Courses/VA-longitudinal/private/MACS-cd4-vload0.raw")
colnames(macs) = c("id", "age", "cd4", "cd8", "vload", "aids",
"vtime", "sctime", "atime", "dtime", "ideath")
dat = macs
######################################
# Should it be a PCA on the residuals from Y ~ X or from the de-meaned and scaled data?
####################################
idvar = "id"
yvar = "cd4"
xvar=  "age"
gridsize = 0.01
dat = dat[, c(idvar, yvar, xvar)]
colnames(dat) = c("id", "y", "x")
dat$id = factor(dat$id)
g = qplot(x=x, y = y, colour = id, data=dat, geom="line") +
guides(colour=FALSE)
g
counts = ddply(dat, .(id), summarise, N = n())
dat = merge(dat, counts, sort=FALSE)
dat = dat %>% subset(N > 3)
# getting range of data and prediction matrix
ranges = dat %$% x %>% range %>% as.numeric
pred.df = data.frame(x = seq(ranges[1], ranges[2], by=gridsize))
#############
# Creating interpolation models
#############
# dat = ddply(dat, .(id), function(d){
#   d = ddply(d, .(x), function(x){
#     x = x[1,]
#   })
# })
mods = ddply(dat, .(id), function(d){
mx = max(d$x)
my = d$truevol[ which(d$x == mx) ]
knots = unique(d$x)
# take out last one - otherwise unstable
knots = knots[ knots!= mx]
mod = lm(y ~ -1 + bs(x = x, degree = 1,
knots = knots),
data=d)
suppressWarnings({p = predict(mod, pred.df)})
p = cbind(pred.df, y = p)
p$y[ p$from_base > mx ] = my
p
}, .progress = 'text')
# plot(truevol ~ from_base, data=d, type='p')
# points(truevol ~ from_base, data=m, xlim=range(d$from_base))
#
# mods = ddply(dat, .(id), function(d){
#   mx = max(d$from_base)
#   my = d$truevol[ which(mx == max(d$from_base)) ]
#   mod = smooth.spline(y=d$truevol, x=d$from_base, all.knots = TRUE)
#   p = predict(mod, pred.df$from_base)$y
#   p = cbind(pred.df, truevol = p)
#   p$truevol[ p$from_base > mx ] = my
#   p
# }, .progress = 'text')
# g %+% mods
mat = spread(mods, key=id, value=y)
mat$x = NULL
mat = as.matrix(mat)
pca = prcomp(x = mat, center=TRUE, scale=TRUE)
spca = summary(pca)
pct.var = spca$importance['Cumulative Proportion',]
cutoff = 0.95
keep = seq(1, max(1, min(which(pct.var > cutoff) - 1)))
pcs = pca$x[, keep, drop=FALSE]
cormat = cor(pcs, mat)
plot.ind = apply(abs(cormat), 1, which.max)
plot.ind
plot.ids = colnames(mat)[plot.ind]
pred.df$mean = rowMeans(mat)
n.id = length(unique(dat$id))
dat$id = factor(dat$id)
g = qplot(x=x, y = y, colour = id, size = id, data=dat, geom="line") +
guides(colour=FALSE, size = FALSE)
col = rep(alpha("black", 0.1), n.id)
lwd = rep(1, n.id)
col[ levels(dat$id) %in% plot.ids ] = alpha("black", 1)
lwd[ levels(dat$id) %in% plot.ids ] = 2
g = g + scale_colour_manual(values = col) + scale_size_manual(values = lwd) +
theme_bw()
g2 = g + geom_smooth(aes(group=1), se=FALSE, colour= "green", size = 2)
g2
library(knitr)
library(highr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", dev='png')
knit_hooks$set(inline = function(x) {
if (is.numeric(x)) return(knitr:::format_sci(x, 'latex'))
hi_latex(x)
})
setwd("~/Dropbox/Neurohacking/File_Formats")
?writeNIfTI
?dicom2nifti
?writeNIfTI(nim = )
?writeNIfTI()
?writeNIfTI
export PATH=${PATH}:/dexter/disk2/smart/programs/afni
rm(list=ls())
library(tuneR)
library(plyr)
library(ggplot2)
library(data.table)
mp3dir = path.expand("~/Dropbox/police_scanner")
mp = readMP3(file.path(mp3dir,
"201504271059-23716-3918.mp3"))
