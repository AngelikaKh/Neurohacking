\documentclass[11pt]{beamer}
\usetheme{Warsaw}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{array}
\usepackage{graphicx}
\author{John Muschelli}
\usepackage{hyperref}
\setbeamertemplate{navigation symbols}{}%remove navigation symbols

\title{Displaying Image Information}
%\setbeamercovered{transparent} 
%\setbeamertemplate{navigation symbols}{} 
%\logo{} 
\institute{Johns Hopkins Bloomberg School of Public Health} 
%\date{} 
%\subject{} 
\setlength{\topsep}{0pt}
\setlength{\parskip}{0pt}
\setlength{\partopsep}{1pt}
\setbeamertemplate{footline}[frame number]

\newcommand {\framedgraphic}[2] {
    \begin{frame}{#1}
        \begin{center}
            \includegraphics[width=\textwidth,height=0.8\textheight,keepaspectratio]{#2}
        \end{center}
    \end{frame}
}

\begin{document}

\begin{frame}
\titlepage
\end{frame}

%\begin{frame}
%\tableofcontents
%\end{frame}

<<label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE>>=
library(knitr)
library(highr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, warning=FALSE, comment="", dev='png', out.height='0.5\\textheight,keepaspectratio',
               out.width='\\textwidth')
knit_hooks$set(inline = function(x) { 
  if (is.numeric(x)) return(knitr:::format_sci(x, 'latex')) 
  hi_latex(x) 
}) 
setwd("~/Dropbox/Neurohacking/Image_Visualization/")
@

\begin{frame}[fragile]{Reading In Data}
The \verb|readNIfTI| command (\verb|oro.nifti| package) can read in NIfTI file (compressed or not) into a \verb|nifti| object.  We will read in the NIfTI (T1-weighted) image from the previous session:

<<readnifti>>=
library(oro.nifti)
print({nii = readNIfTI(fname = "Output_3D_File")})
@
\end{frame}

\begin{frame}[fragile]{Visualizing a Slice}
The \verb|nifti| object is a 3D \verb|array| (see \verb|?array|) with header information.  We can use the \verb|image| function (\verb|graphics| package) to visualize a slice (slice 20 in the z-direction/axial):

\begin{center}
<<image1, cache=TRUE>>=
image(nii[,,20])
@
\end{center}

\end{frame}


\begin{frame}[fragile]{Visualizing a Slice}
\verb|graphics::image| uses \verb|heat.colors(12)| for coloring, which is not useful for this task.  We can either set the colors manually, or use the \verb|oro.nifti::image| function.  The function is still \verb|image|, but we don't pass in a  slice, but the \verb|nifti| object and specify the slice \verb|z=20|:

\begin{center}
<<image.nifti, cache=TRUE>>=
image(nii, z = 20, plot.type='single')
@
\end{center}

% \framedgraphic{figure/image.nifti-1.png}

\end{frame}


\begin{frame}[fragile]{Visualizing a Slice}
If \verb|plot.type| is not \verb|'single'|, \verb|image.nifti| defaults to plotting ALL slices with data, even if \verb|z| is specified (also called a ``lightbox''):

\begin{center}
<<image.mult, cache =TRUE>>=
image(nii, z = 20)
@
\end{center}

\end{frame}

\begin{frame}[fragile]{Visualizing all 3 planes}
To show all 3 planes (axial, sagittal, and coronal) of an image, we can use the \verb|orthographic| function:

\begin{center}
<<image.ortho, cache =TRUE>>=
orthographic(nii)
@
\end{center}

\end{frame}


\begin{frame}[fragile]{Histograms}
What about the {\bf data}?  We can do normal operations, such as histograms of the image intensities and intensities over $20$:

\begin{center}
<<image.hist, cache =TRUE, fig.width=6, fig.height=3, out.width='\\textwidth'>>=
par(mfrow=c(1,2)); 
hist(nii, breaks = 2000); hist(nii[nii > 20], breaks = 2000)
@
\end{center}

\end{frame}

\begin{frame}[fragile]{Image Overlays}
We can do overlays as well, where we have one image and color it by a second.  For example, we plot slice $10$ and highlight values between $300$ and $400$ (next slide we discuss the code):

\begin{center}
<<image.overlay, cache =TRUE>>=
library(fslr) # need niftiarr
mask = fslr::niftiarr(nii, nii > 300 & nii < 400)
mask[mask == 0] = NA
overlay(nii, mask, col.y= c("red"), 
        plot.type="single", z = 10)
@
\end{center}

\end{frame}


\begin{frame}[fragile]{Image Overlays: Explained}
We load the \verb|fslr| package, which has helper functions for \verb|nifti| objects.  The \verb|nii > 300 & nii < 400| operation returns an \verb|array|, not \verb|nifti| object.  The \verb|niftiarr| command takes in a \verb|nifti| object and array and returns a \verb|nifti| object with the array in the data slot.  We then set any $0$ in mask to \verb|NA| so the \verb|overlay| (\verb|oro.nifti package|) will not mask out data.
\begin{center}
<<image.overlay.show, eval =FALSE>>=
<<image.overlay>>
@
\end{center}

\end{frame}

\begin{frame}[fragile]{Image Overlays: 3 Planes}
We can perform the same operation of overlaying, but in all 3 planes:
\begin{center}
<<image_ortho_overlay, cache =TRUE>>=
orthographic(nii, mask, col.y= c("red"), 
             text ="Image overlaid with mask")
@
\end{center}

\end{frame}


\begin{frame}[fragile]{Functions discussed here}
\begin{itemize}
\item \verb|readNIfTI|: read in data
\item \verb|graphics::image|: display matrix data
\item \verb|oro.nifti::image|: display \verb|nifti| data
\item \verb|oro.nifti::orthographic|: display 3-planes of an image
\item \verb|oro.nifti::overlay|: display overlay of 2 images (NA are not plotting in \verb|y| image)
\item \verb|fslr::niftiarr(x,y|: Copy \verb|nifti| header from object \verb|x| and put in new \verb|array| \verb|y| into data part
\end{itemize}

\end{frame}





\end{document}