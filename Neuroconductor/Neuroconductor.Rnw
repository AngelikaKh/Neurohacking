\documentclass[11pt]{beamer}
\usetheme{Warsaw}
\usepackage[utf8]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\usepackage{array}
\usepackage{graphicx}
\author{John Muschelli}
\usepackage{hyperref}
\usepackage{tikz}
\usetikzlibrary{calc,intersections}

\usetikzlibrary{shapes,arrows}
\usetikzlibrary{positioning}
\setbeamertemplate{navigation symbols}{}%remove navigation symbols

\title{Neuroimaging Processing R}
%\setbeamercovered{transparent} 
%\setbeamertemplate{navigation symbols}{} 
%\logo{} 
\institute{Johns Hopkins Bloomberg School of Public Health} 
%\date{} 
%\subject{} 
\setlength{\topsep}{0pt}
\setlength{\parskip}{0pt}
\setlength{\partopsep}{1pt}
\setbeamertemplate{footline}[frame number]

\usepackage[
  natbib = true,
    backend=bibtex,
]{biblatex}
\bibliography{fslr_reg}
\AtEveryBibitem{
\clearfield{note}
% \clearlist{address}
% \clearfield{eprint}
% \clearfield{isbn}
% \clearfield{issn}
% \clearlist{location}
% \clearfield{month}
% \clearfield{series}
} % clears language


\newcommand {\framedgraphic}[2] {
    \begin{frame}{#1}
        \begin{center}
            \includegraphics[width=\textwidth,height=0.8\textheight,keepaspectratio]{#2}
        \end{center}
    \end{frame}
}

\begin{document}

\begin{frame}
\titlepage
\end{frame}

%\begin{frame}
%\tableofcontents
%\end{frame}

<<label=opts, results='hide', echo=FALSE, message = FALSE, warning=FALSE>>=
library(knitr)
library(highr)
opts_chunk$set(echo=TRUE, prompt=FALSE, message=FALSE, 
               cache = TRUE,
               eval=FALSE,
               warning=FALSE, comment="", dev='png', out.height='0.5\\textheight,keepaspectratio',
               out.width='\\textwidth')
knit_hooks$set(inline = function(x) { 
  if (is.numeric(x)) return(knitr:::format_sci(x, 'latex')) 
  hi_latex(x) 
}) 
setwd("~/Dropbox/Neurohacking/Neuroconductor/")
library(oro.nifti)
library(fslr)
library(extrantsr)
library(ANTsR)
library(WhiteStripe)
library(scales)
@


\begin{frame}[fragile]{What makes a comprehensive (s)MRI library}

\begin{itemize}

\item Read/Write NIfTI images
\item Visualize Images
\item Inhomogeneity/Bias-field Correction
\item Segmentation
  \begin{itemize}
    \item Brain Extraction
    \item Tissue-Class Segmentation (WM, GM, CSF)
  \end{itemize}
\item Spatial "Normalization"/Registration 
  \begin{itemize}
    \item Within Visit
    \item Across Visit/People
  \end{itemize}
\item Intensity Normalization

\end{itemize}
\end{frame}

\begin{frame}[fragile]{FSL and fslr}

\begin{itemize}
\item FSL is a comprehensive library of analysis tools for fMRI, MRI and DTI brain imaging data. 
  \begin{itemize}
  \item Collection of routines in C, C++
  \end{itemize}
\item fslr: port of FSL into R
\item The two functions we focus on are: 
\begin{enumerate}
\item Brain Extraction Tool (BET)
\item Image inhomogeneity correction and Tissue-class Segmentation (using FAST \citep{zhang2001segmentation})
\end{enumerate} 
\end{itemize}

\end{frame}

\begin{frame}[fragile]{ANTS and ANTsR}

\begin{itemize}
\item Advanced normalization tools (ANTS) \citep{avants2011reproducible} is state-of-the art software that can perform many neuroimaging-related functions.  
  \begin{itemize}
	\item Collection of routines in C, C++, and some R
	\end{itemize}
\item ANTsR: port of ANTS into R using Rcpp
\item The two functions we focus on are: 
\begin{enumerate}
\item Image inhomogeneity correction (N3 \citep{sled1998nonparametric} and N4 \citep{tustison2010n4itk})
\item Tissue-Class Segmentation (Atropos/K-means)
\item Image registration (Symmetric Normalization)
\end{enumerate} 
\end{itemize}

\end{frame}

\begin{frame}[fragile]{extrantsr and WhiteStripe}

\begin{itemize}
\item extrantsr:

{\bf Extr}a {\bf ANTsR} functions.

ANTsR has some non-intuitive syntax and structures.  I created extrantsr to make thing easier and create pipelines. 

\item WhiteStripe:

WhiteStripe from \citet{shinohara2013normalization}:
intensity-based normalization of T1 and T2 image that estimates a white matter mean and standard deviation on data rigidly-registered to the MNI template using histogram-based methods.

\end{itemize}
\end{frame}


\begin{frame}[fragile]{Installing These Packages}
First, you must Install FSL \href{http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation}{http://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FslInstallation}.  \\
\vspace{0.5cm}

\verb|fslr| is installed on CRAN, but the development arm of \verb|fslr| is most likely the best to install, using the \verb|devtools| package (requires new version of \verb|oro.nifti|)

ANTsR is currently (as of April 3, 2015) hosted on GitHub.  

<<install_devtools_fslr, eval=FALSE>>=
if (!require(devtools)){
	install.packages('devtools')
}
devtools::install_github("muschellij2/oro.nifti")
devtools::install_github("muschellij2/fslr")
install.package("WhiteStripe")
devtools::install_github("stnava/cmaker")
devtools::install_github("stnava/ITKR")
devtools::install_github("stnava/ANTsR")
@

\end{frame}

\begin{frame}[fragile]{Installing These Packages}

Setup for JHPCE Cluster is here:

\url{http://muschellij2.github.io/neuro_cluster/README.html
}

\end{frame}



\begin{frame}[fragile]{Unix}

FSL works only on Unix-type machines, so \verb|fslr| only works on Unix-type machines. 

\end{frame}


\begin{frame}[fragile]{Structure of fslr functions}

\tikzstyle{bblock} = [rectangle, draw, text width=7em, text centered, minimum height=2em, rounded corners, align=flush center]
\tikzstyle{line} = [draw, text centered , -latex']
\tikzstyle{line node} = [draw, fill=white, font=\tiny ]
\tikzstyle{block} = [rectangle, draw, text width=5em, text centered, minimum height=4em, rounded corners]

\begin{figure}
\centering
\begin{tikzpicture}[node distance = .5cm, every node/.style={rectangle,fill=white},  transform shape]
% Place nodes
\node [bblock] (fname) {Character filename};
%\node [bblock, right=1cm of fname] (nim) {\verb|nifti| object};
\node [bblock, below right=1cm and 0.1cm of fname] (fslr_func) {fslr function (call FSL function) };
%\node [bblock, above right=1cm and 0.1cm of fslr_func] (nim) {nifti object in R };
\node [bblock, right=3cm of fname] (nim) {nifti object in R };
\node [bblock, below left=1cm and 0.1cm of fslr_func] (nii_back) { Return nifti object to R };
\node [bblock, right=3cm of nii_back] (write) { Write Image to Disk };


% Draw edges
%\path [line] (nim) -| node[xshift=-0.1cm] {} ([xshift=.1 cm]fslr_func.north);
%\path [line] (fname) -| node[xshift=0.1cm] {or} ([xshift=-.1 cm]fslr_func.north);
\path [line] (nim) -| node {} (fslr_func.north);
\path [line] (fname) -| node {or} (fslr_func.north);
%\path [line] (fname) -| ([xshift=-.1 cm]fslr_func.north);
\path [line] ([xshift=.1 cm]fslr_func.south) |- node[xshift=0.1cm] {} (write);
\path [line] ([xshift=-.1 cm]fslr_func.south) |- node[xshift=0.1cm] {and/or} (nii_back);
%\path [line] ([xshift=-.1 cm]fslr_func.south) |- (nii_back);
%\path [line] (fslr_func) |- (write);
%\coordinate[xshift=0.1 cm] (fslr_func) at (write);
%\path [line] (fslr_func) |- (write)+(0,0.1 cm);

\end{tikzpicture}
\end{figure}

\end{frame}

<<check_fsl_set_real, eval=TRUE, echo=FALSE, cache=FALSE>>=
options(fsl.path="/usr/local/fsl")
@


\begin{frame}[fragile]{Reading and Writing Images}
The \verb|oro.nifti| does most of the reading/writing of NIfTI images:

<<read_img, cache=FALSE>>=
library(oro.nifti)
nim = readNIfTI("Output_3D_File.nii.gz", 
reorient=FALSE)
nim
@
\end{frame}

\begin{frame}[fragile]{Reading in Images using ANTsR}
Reading in images using ANTsR requires 2 changes compared to \verb|readNIfTI| from \verb|oro.nifti|:
\begin{enumerate}
\item The extension of the filename (e.g. \verb|.nii.gz|) must be specified
\item The dimension of the image (usually 3) must be supplied (could be 2, 3, or 4)
\end{enumerate}

<<read_ants>>=
library(ANTsR)
aimg = antsImageRead("Output_3D_File.nii.gz", 
dimension = 3)
@
\end{frame}

\begin{frame}[fragile]{ANTsR images}

The \verb|aimg| object is an object of \verb|antsImage|, which consists of:
\begin{itemize}
\item pixeltype - how is the image stored (integers versus fractional numbers (floats))
\item dimension - how many dimensions does the image have
\item pointer - where the data is stored
\end{itemize}

<<ants_class>>=
class(aimg)
aimg
slotNames(aimg)
@
\end{frame}


\begin{frame}[fragile]{Visualizing Images}

<<view_img, cache=TRUE>>=
orthographic(nim)
@

\end{frame}


\begin{frame}[fragile]{Visualizing Images with an Overlay}
Viewing the image and overlaying in red values $> 200$)
<<view_img_overlay, cache=TRUE>>=
library(fslr)
ortho2(nim, nim > 200, col.y=alpha("red", 0.5))
@

\end{frame}


\begin{frame}[fragile]{Inhomogeneity/Bias-Field Correction}

ANTsR has \verb|n3BiasFieldCorrection| and \verb|n4BiasFieldCorrection|.  These require \verb|antsImage| objects to run.  \\

\vspace{0.5in}
\verb|extrantsr::bias_correct| will perform either of these, you just need to switch \verb|correction|


<<bc, cache = TRUE>>=
library(extrantsr)
n4img = bias_correct(nim, correction ="N4", retimg=TRUE)
@
\end{frame}


\begin{frame}[fragile]{fslr: Brain Extraction}

FSL's Brain Extraction Tool (BET) can be used for skull stripping.  It is fast, robust, and one of the most popular for this task.  \verb|fslr::fslbet| is used to call the FSL commands \verb|bet2|, which does brain extraction or \verb|bet|, which does brain extraction with additional options.

<<echo=FALSE>>=
options(fsl.path="/usr/local/fsl")
@

<<bet,  cache = TRUE>>=
brain_img = fslbet(infile=n4img, retimg=TRUE)
### rerurn with new cog
cog = cog(brain_img, ceil=TRUE)
brain_img2 = fslbet(infile=n4img, 
                    retimg=TRUE, 
                    opts = paste("-c", paste(cog, collapse= " ")))
@
\end{frame}


<<plot_bet,  echo = FALSE, cache=TRUE, results='hide'>>=
library(scales)
png("BET_Image.png")
orthographic(robust_window(brain_img), text="Brain-Extracted\n Image")
dev.off()
png("BET_Image_Overlay.png")
ortho2(robust_window(n4img),
cal_img(brain_img > 0),
NA.y=TRUE,
col.y=alpha("red", 0.5),
text = "Brain Mask Overlay")
dev.off()
png("BET_Image_Overlay2.png")
ortho2(robust_window(n4img),
cal_img(brain_img2 > 0),
NA.y=TRUE,
col.y=alpha("red", 0.5),
text = "Brain Mask Overlay\nAfter COG")
dev.off()
@

\begin{frame}[fragile]{fslr: Brain Extraction Results}

\begin{tabular}{ccc}
\includegraphics[width=0.32\linewidth]{BET_Image.png} & \includegraphics[width=0.32\linewidth]{BET_Image_Overlay.png} & \includegraphics[width=0.32\linewidth]{BET_Image_Overlay.png} 
\end{tabular}

\end{frame}

\begin{frame}[fragile]{ANTsR: Tissue class Segmentation}

Below is some code to do k-means segmentation of an image (k=5) and then finding the one with the highest intensity (white matter). (discuss \verb|ants2oro|)

<<kmeans, echo=TRUE, results='hide', cache=TRUE>>=
library(fslr)
a = oro2ants(brain_img2)
x = oro2ants((brain_img2>0)*1)
k = 5; km = kmeansSegmentation(a, k=k, kmask=x)
res = ants2oro(km$segmentation)
voxsize = prod(voxdim(n4img))/1000
ks = seq(k); sizes = sapply(ks, function(i) sum(res == i)) * voxsize
keep_ks = ks[ sizes > 200 ] # Arbitrary size - need to be "big"
wm = cal_img(res == max(keep_ks))
@

<<plot_bw, echo = FALSE, cache=TRUE, results='hide'>>=
png("WM_Image.png")
xyz = cog(wm, ceil=TRUE)
ortho2(robust_window(n4img), wm, col.y=alpha("red", 0.5), xyz=xyz,
       text ="White Matter\n Segmentation")
dev.off()
@

\end{frame}

\begin{frame}[fragile]{fslr: FAST tissue-class segmentation}

<<cache=FALSE, echo=FALSE>>=
options(fsl.path="/usr/local/fsl")
@

<<fast, echo=TRUE, results='hide', cache=FALSE>>=
fast_img  = readNIfTI("test_fast_seg.nii.gz", reorient=FALSE)
@

<<plot_fast,  echo = FALSE, cache=FALSE, results='hide'>>=
png("FAST_Image.png")
ortho2(robust_window(n4img), fast_img ==2, col.y=alpha("red", 0.5), xyz=xyz,
       text ="FAST\n White Matter\n Segmentation")
dev.off()
@

\end{frame}

\begin{frame}[fragile]{Tissue-Extraction Results}

\begin{tabular}{cc}
\includegraphics[width=0.5\linewidth]{WM_Image.png} & \includegraphics[width=0.5\linewidth]{FAST_Image.png}
\end{tabular}

\end{frame}


\begin{frame}[fragile]{Image Registration}

\begin{itemize}

\item fslr
  \begin{itemize}
  
  \item flirt - linear (rigid/affine) registration
  \item fnirt - non-linear registration
  
  \end{itemize}
  
\item ANTsR: antsRegistration
  \begin{itemize}
  
  \item Rigid/Affine
  \item SyN - symmetric Normalization (REVERSIBLE non-linear registration)
  
  \end{itemize}  

\end{itemize}

\end{frame}


\begin{frame}[fragile]{Image Registration: to Template}

\verb|extrantsr::ants_regwrite| will register images (nifti objects or filenames), write outfiles, 

<<cache=FALSE, echo=FALSE>>=
options(fsl.path="/usr/local/fsl")
@

<<regwrite_template>>=
brain_to_temp = ants_regwrite(file = brain_img2,
                              template.file = "MNI152_T1_1mm_brain.nii.gz", 
                              typeofTransform = "SyN")
@

\end{frame}

<<plot_brain, echo=FALSE, results='hide', cache=FALSE>>=
template_brain = readNIfTI("MNI152_T1_1mm_brain.nii.gz", reorient=FALSE)
png("Template_brain.png")
orthographic(robust_window(template_brain), text="Template Brain \n Image")
dev.off()
png("SyN_Reg_Image.png")
orthographic(robust_window(brain_to_temp), 
             text = "Registered \n N4-Corrected\n Image")
dev.off()
@


% \begin{frame}[fragile]{Image Registration to Template Results}
% 
% \begin{tabular}{cc}
% \includegraphics[width=0.5\linewidth]{Template_brain.png} & \includegraphics[width=0.5\linewidth]{SyN_Reg_Image.png}
% \end{tabular}
% 
% \end{frame}


\begin{frame}[fragile]{CRAN/NITRC is not good enough}

\begin{itemize}
\item CRAN is great for R.

\item CRAN is bad for neuroimaging.

\item NITRC is not good enough for neuroimaging (Neuroimaging Informatics Tools and Resources Clearinghouse)

\end{itemize}
\end{frame}


\begin{frame}[fragile]{GitHub has what we need}

\begin{itemize}
\item Version control (obviously)

\item Install packages via \verb|devtools::install_github|

\item Stars for GitHub Packages

\item Travis CI for checking builds

\item Issue pages

\item Data Packages (if github.com)

\item Collaborations

\item Live development version

\end{itemize}

\end{frame}


\begin{frame}[t,allowframebreaks]
  \frametitle{References}
  \printbibliography
 \end{frame}


\begin{frame}[fragile]{Interactive/GUI vs. Terminal R}

In general, GUI-based apps do not inherit the shell environment (aka if \verb|FSLDIR| is defined in your Terminal, RStudio doesn't see it).

For fslr to work, it must know where the directory FSL was installed.  If \verb|FSLDIR| is found, it will be used.  You can check this by 2 ways:

<<check_fsl>>=
Sys.getenv("FSLDIR")
library(fslr)
have.fsl()
@

If \verb|have.fsl()= FALSE| then you must specify the path using:

<<check_fsl_set, eval=FALSE>>=
options(fsl.path="/my/path/to/fsl")
@


\end{frame}


\begin{frame}[fragile]{Functions of Note}

\verb|extrantsr::preprocess_mri_within| - will N4 (or N3) correct images, co-register scans to the first (T1w usually) scan, skull strip the image (using BET)

\end{frame}


\end{document}